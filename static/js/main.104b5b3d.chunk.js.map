{"version":3,"sources":["assets/video/bg.mp4","App.js","reportWebVitals.js","index.js"],"names":["api","App","useState","city","setCity","weather","setWeather","condition","setCondition","className","getClass","autoPlay","loop","muted","src","bgvideo","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","main","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","temp","temp_min","temp_max","feels_like","visibility","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"yLAAe,MAA0B,+BCGnCA,EACC,mCADDA,EAEE,2CA0HOC,MAvHf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAEiBF,mBAAS,IAF1B,mBAENG,EAFM,KAEGC,EAFH,OAGqBJ,mBAAS,IAH9B,mBAGNK,EAHM,KAGKC,EAHL,KAoEb,OACE,qBAAKC,UApBU,WACf,OAAQF,GACN,IAAK,QACH,MAAO,QACT,IAAK,SACH,MAAO,SACT,IAAK,OACH,MAAO,OACT,IAAK,OACH,MAAO,OACT,IAAK,OACH,MAAO,OACT,IAAK,QACH,MAAO,QACT,QACE,MAAO,MAKKG,GAAhB,SACE,iCACE,uBAAOC,UAAQ,EAACC,MAAI,EAACC,OAAK,EAACJ,UAAU,KAArC,SACE,wBAAQK,IAAKC,EAASC,KAAK,gBAG7B,qBAAKP,UAAU,aAAf,SACE,uBACEO,KAAK,OACLP,UAAU,aACVQ,YAAY,+BACZC,SAAU,SAAAC,GAAC,OAAIf,EAAQe,EAAEC,OAAOC,QAChCA,MAAOlB,EACPmB,WAlEK,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIzB,EAAJ,qBAAyBG,EAAzB,+BAAoDH,IACtD0B,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJvB,EAAWuB,GACXC,QAAQC,IAAIF,GACZrB,EAAaqB,EAAOxB,QAAQ,GAAG2B,MAC/B5B,EAAQ,YA8De,oBAAhBC,EAAQ2B,KACf,gCACE,sBAAKvB,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UAA2BJ,EAAQ4B,KAAnC,KAA2C5B,EAAQ6B,IAAIC,WACvD,qBAAK1B,UAAU,OAAf,SApDQ,SAAC2B,GACnB,IAGIC,EAFO,CAAC,SAAU,SAAU,UAAW,YAAa,WAAY,SAAU,YAE/DD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EALS,CAAC,UAAW,WAAY,QAAS,QAAS,MAAO,OAAQ,OAAQ,SAAU,YAAa,UAAW,WAAY,YAKzGL,EAAEM,YACjBC,EAAOP,EAAEQ,cACb,MAAM,GAAN,OAAUP,EAAV,aAAkBE,EAAlB,YAA0BE,EAA1B,YAAmCE,GA4CFE,CAAY,IAAIC,WAGzC,sBAAKrC,UAAU,cAAf,UACE,sBAAKA,UAAU,OAAf,UACE,gCACGsC,KAAKC,MAAM3C,EAAQ2B,KAAKiB,MAD3B,WAGA,sBAAKxC,UAAU,SAAf,UACGsC,KAAKC,MAAM3C,EAAQ2B,KAAKkB,UAD3B,IACuCH,KAAKC,MAAM3C,EAAQ2B,KAAKmB,UAD/D,eAIF,sBAAK1C,UAAU,UAAf,wBACcJ,EAAQA,QAAQ,GAAG2B,QAEjC,sBAAKvB,UAAU,UAAf,yBACesC,KAAKC,MAAM3C,EAAQ2B,KAAKoB,YADvC,WAGA,sBAAK3C,UAAU,UAAf,yBACgBJ,EAAQgD,WAAa,IADrC,iBAKD,SC7GEC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB9B,MAAK,YAAkD,IAA/C+B,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.104b5b3d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/bg.14dd7084.mp4\";","import React, { useState } from 'react';\nimport bgvideo from './assets/video/bg.mp4';\n\nconst api = {\n  key: '97f2310ad387ae2eef69b41f1da620f8',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nfunction App() {\n  const [city, setCity] = useState('');\n  const [weather, setWeather] = useState({});\n  const [condition, setCondition] = useState('');\n  // const [today, setToday] = useState(new Date());\n\n  // const time = () => {\n  //   let time = null;\n  //   const timer = setInterval(() =>\n  //     time = (new Date().toLocaleTimeString(weather.sys.country))\n  //     , 1000);\n  //   return function cleanup() {\n  //     clearInterval(timer);\n  //   }\n  // }\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${city}&units=metric&appid=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          console.log(result);\n          setCondition(result.weather[0].main)\n          setCity('');\n        });\n    }\n\n  }\n\n  // const time = () => {\n  //   let time = new Date().toLocaleTimeString('en-US',{timeZone:weather.timezone});\n  //   console.log(time)\n  //   console.log(weather.sys.country)\n  //   // return time;\n  //   // console.log(time)\n  // }\n\n  const dateBuilder = (d) => {\n    let months = [\"January\", \"February\", \"March\", \"April\", \"May\", \"June\", \"July\", \"August\", \"September\", \"October\", \"November\", \"December\"]\n    let days = [\"Sunday\", \"Monday\", \"Tuesday\", \"Wednesday\", \"Thursday\", \"Friday\", \"Saturday\"];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n    return `${day}, ${date} ${month} ${year}`\n  }\n\n  const getClass = () => {\n    switch (condition) {\n      case 'Clear':\n        return 'clear';\n      case 'Clouds':\n        return 'cloudy';\n      case 'Haze':\n        return 'haze';\n      case 'Rain':\n        return 'rain';\n      case 'Snow':\n        return 'snow';\n      case 'Sunny':\n        return 'sunny';\n      default:\n        return 'bg';\n    }\n  }\n\n  return (\n    <div className={getClass()}>\n      <main>\n        <video autoPlay loop muted className=\"bg\">\n          <source src={bgvideo} type=\"video/mp4\" />\n        </video>\n\n        <div className='search-box'>\n          <input\n            type='text'\n            className='search-bar'\n            placeholder='Search by city name/ZIP code'\n            onChange={e => setCity(e.target.value)}\n            value={city}\n            onKeyPress={search}\n          />\n        </div>\n\n        {(typeof weather.main != \"undefined\") ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">{weather.name}, {weather.sys.country}</div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n              {/* <div className=\"date\">{time()}</div> */}\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">\n                <div>\n                  {Math.round(weather.main.temp)}°c\n                </div>\n                <div className=\"minMax\">\n                  {Math.round(weather.main.temp_min)}/{Math.round(weather.main.temp_max)} °c\n                </div>\n              </div>\n              <div className=\"weather\">\n                Condition: {weather.weather[0].main}\n              </div>\n              <div className=\"weather\">\n                Feels Like: {Math.round(weather.main.feels_like)}°c\n              </div>\n              <div className=\"weather\">\n                Visibility: {(weather.visibility / 1000)} KM/s\n              </div>\n            </div>\n          </div>\n        ) : ('')}\n      </main>\n    </div >\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}